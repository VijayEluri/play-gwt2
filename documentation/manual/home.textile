h1. <a>Play GWT2 Module Version 1.5</a>

p.  Play GWT2 1.5 provides some classes and commands to simplify the integration of a GWT 2.2.0 Module in a play application. 
 
This module has been tested with play 1.2 and gwt 2.2.0

p. In the version 1.5
 - GWT Service are executed async, using Jobs.
 - No more need to use annotation @GWT2ServicePath. Just name your service as in the annotation @RemoteServiceRelativePath and place the class in the sub package services.
 - Add tag #{gwt2.module 'mymodule'/} to easly load a module script in a page

h2. <a>Installation</a>

p. 1. This module does not includes GWT SDK. You will need to download it. ( version 2.0.0 )

p. 2. Set GWT_PATH (or GWT_HOME) environment variable.

bc. > export GWT_HOME=<path to gwt foder>

p. 3. Create a new Play! application or use an existing one. 

bc. > play new myApp

p. 4. Go to your application

bc. > cd myApp

p. 5. Edit <myApp>/conf/dependencies.yml files, and add gwt2 module:

bc. ~# Application dependencies
~require:
~    - play
~    - play -> gwt2 1.5

p. 6. Install GWT2 module.

bc. > play install gwt2

TIPS: Skip the previous command if you want to install the module directly in the "modules" folder of your application.
 
p. 7. execute the next command to add the module to your play application 

bc. > play deps
 
h2. <a>Initialize you Application</a> 
 
bc. play gwt2:init

p. this will
 - create a folder in your application : myApp/app/gwt (directory for gwt modules)
 - create a folder in your application : myApp/gwt-public (directory for GWT compiled resources)
 - and copy gwt-user.jar to myApp/lib
 - Add a default App.gwt.xml in your myApp

if you want to change get path for you gwt modules, edit the conf/application.conf file and add theese lines

bc. # GWT2 Configuration
#
#  CONFIGURATION HAS CHANGED
# ~~~~~
# gwt2.modulesdir=<modulesdir> 
# it will be use to know where are gwt modules
# default: gwt
#
# gwt2.publicdir=<publicdir>
# it will be use to know where are the public directory for compiled module and for routing
# default: gwt-public
#
# gwt.publicpath=/<path>
# it will be use for routing configuration
# default: /app
#
#

then you can set you personal folder to use

if you want to manage the gwt-user.jar with play dependencies, add gwt-user to your play dependencies file.

bc. ~# Application dependencies
~require:
~    - play
~    - play -> gwt2 1.5
~    - com.google -> gwt-user 2.2.0

Remove lib/gwt-user.jar

bc. > rm lib/gwt-user.jar

then run "play deps" again

bc. > play deps


h2. <a>Update your route file</a>

Update your route file to add gwt2 dynamic routing

bc. *		/      module:gwt2

h2. <a>Create a GWT Module</a> 
 
create your module like this:

bc. play gwt2:create myApp

p. this will ask you a gwt module name 

bc. What is the gwt module name ?

p. enter for eg: firstmodule

p. this action create some files

bc.	myApp/app/gwt/firstmodule
myApp/app/gwt/firstmodule/Firstmodule.gwt.xml (module)
myApp/app/gwt/firstmodule/public
myApp/app/gwt/firstmodule/public/index.html (default page for entry point)
myApp/app/gwt/firstmodule/client
myApp/app/gwt/firstmodule/client/Firstmodule.java (entry point)
myApp/app/gwt/firstmodule/client/GreetingService.java
myApp/app/gwt/firstmodule/client/GreetingServiceAsync.java
myApp/app/gwt/firstmodule/shared
myApp/app/gwt/firstmodule/shared/FieldVerifier.java
myApp/app/gwt/firstmodule/services
myApp/app/gwt/firstmodule/services/Greeting.java

p. GreetingService Interface must use annotation @RemoteServiceRelativePath("greeting")

p. Service Implementation must implements GWTService, be place in the package gwt.<module>.services, and named as define in annotation @RemoteServiceRelativePath

p. Or if you want to place your service or name it differently, eg: GreetingServiceImpl.java, you must use @GWT2ServicePath("/firstmodule/greet") annotation


h2. <a>Testing you GWT Module with dev mode</a>

First start you Play application.

bc. play run myApp

Then start the dev mode, 

bc. play gwt2:devmode myApp

p.  GWT will compile your modules at first time.

p. Now you access your gwt module this url <host>/app/firstmodule/index.html 

h2. <a>Compiling a module</a>

To compile a module (eg: before deployment)

bc. play gwt2:compile myApp

p. this will ask you a gwt module name 

bc. What is the gwt module name ? 

p.  Enter a name, then GWT will compile your module.


h2. <a>Remove a GWT Module</a>

p. As for creating a new GWT Module but use gwt2:remove 

bc. play gwt2:remove myApp

p. this will ask you a gwt module name 

bc. What is the gwt module name ?

p. all directory of your module will be deleted:
- 	myApp/app/gwt/firstmodule/**
- 	myApp/gwt-public/firstmodule/**


h2. <a>Debugging the GWT UI</a>

p. 1. The easiest way it to eclipsify, netbeansify, ... you application and then use you prefered IDE to use JPDA. By default GWT listen on port 3408.


h2. <a>Creating a service using GWT-RPC</a>

**this part is the same as the Play-GWT by Rustem Suniev**.

If you follow the GWT manual, it will explain you how to expose a service with GWT-RPC using a **RemoteServiceServlet**. 

Exposing a GWT service with Play is almost the same, but since you can't define servlets in a Play application, you have to use the provided support class, **play.modules.gwt.GWTService** 

For example, to implement this service:

bc. 
package gwt.mymod.client;
import com.google.gwt.user.client.rpc.RemoteService;
import com.google.gwt.user.client.rpc.RemoteServiceRelativePath;
@RemoteServiceRelativePath("hello")
public interface HelloService extends RemoteService {
    String sayHello(String name);
}


simply create a class that extends the **play.modules.gwt.GWTService**, and define the service URL path with the **play.modules.gwt.GWTServicePath** annotation. Like this:

bc.  
package services;
import play.modules.gwt2.GWT2Service;
import play.modules.gwt2.GWT2ServicePath;
import gwt.mymod.client.HelloService;
@GWT2ServicePath("/main/hello")
public class HelloServiceImpl extends GWT2Service implements HelloService {
    public String sayHello(String name) {
        return "Hello " + name;
    }
}

This is the only difference from the GWT documentation.

h2. <a>Using Play Model</a>
You can use Play Model directly with your GWT Services. For that you have 2 solutions.

p. 1. the first one is to create JPA Entity without extending play.db.jpa.Model

bc. @Entity
public class MyModel 
{
	@Required
	@MinSize(1)
	@MaxSize(100)
	@Column(name="text", nullable=false, length=100)
	public String someText;
}

You will have to use JPA.em().

p. 2. the second one is to extends your model with play.db.jpa.Model and add a Custom Field Serializer side to the model class.

bc. MyModel.java
@Entity
public class MyModel extends Model 
{
	@Required
	@MinSize(1)
	@MaxSize(100)
	@Column(name="text", nullable=false, length=100)
	public String someText;
}

bc. MyModel_CustomFieldSerializer.java
public class MyModel_CustomFieldSerializer {
	public static MyModel instantiate(SerializationStreamReader reader)
		throws SerializationException {
		return new MyModel();
	}
	public static void serialize(SerializationStreamWriter writer,
			MyModel instance)
		throws SerializationException {
		writer.writeObject(instance.id);
		writer.writeString(instance.someText);
	}
	public static void deserialize(SerializationStreamReader reader,
			MyModel instance)
		throws SerializationException {
		instance.id = (Long) reader.readObject();
		instance.someText = reader.readString();
	}

h2. <a>Samples</a>

You will find 2 samples in the folder "samples" in the play gwt2 modules.

1. simple test 
This sample is just a basic gwt module create with:
 - gwt2:init
 - gwt2:create
 - gwt2:compile

2. myModel
This sample is an basic gwt module wich use Play Model.


h2. <a>About</a>

This Module is maintained by **Vincent Buzzano** and was originaly based on the GWT Plugin by Rustem Suniev.

website:
 - http://github.com/vbuzzano/play-gwt2